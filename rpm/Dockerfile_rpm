FROM rockylinux:8.8

ARG ACCESS_TOKEN

ARG PGSPIDER_RPM_ID
ARG proxy
ARG no_proxy

ENV http_proxy ${proxy}
ENV https_proxy ${proxy}
ENV no_proxy ${no_proxy}

ARG PACKAGE_RELEASE_VERSION

ARG PGSPIDER_BASE_POSTGRESQL_VERSION
ARG PGSPIDER_RELEASE_VERSION
ARG POSTGRESQL_BASE_VERSION
ARG POSTGRESQL_VERSION

ARG PARQUET_S3_FDW_RELEASE_VERSION
ARG PGSPIDER_INS=/usr/pgsql-${PGSPIDER_BASE_POSTGRESQL_VERSION}
ARG POSTGRESQL_INS=/usr/pgsql-${POSTGRESQL_BASE_VERSION}

ARG PGSPIDER_RPM_URL
ARG POSTGRESQL_RPM_URL=https://download.postgresql.org/pub/repos/yum/${POSTGRESQL_BASE_VERSION}/redhat/rhel-8-x86_64

ARG AWS_S3_CPP_VERSION
ARG ARROW_VERSION

# Add postgres repository for pgdg-srpm-macros
RUN dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm

RUN dnf install -y bzip2 rpm-build pgdg-srpm-macros-1.0.40-1PGDG.rhel8.noarch sudo cmake
RUN dnf --enablerepo=powertools install -y perl-IPC-Run

RUN if [[ -z ${ACCESS_TOKEN} ]]; then \
        export PARAM_CURL_OPTS='--insecure' ; \
    else \
        export PARAM_CURL_OPTS='--header "PRIVATE-TOKEN: '${ACCESS_TOKEN}'" --insecure' ; \
    fi && \
    echo "PARAM_CURL_OPTS='${PARAM_CURL_OPTS}'" > /tmp/params.txt

# Download PostgreSQL/PGSpider libraries
RUN if [[ -n ${POSTGRESQL_BASE_VERSION} && -n ${POSTGRESQL_VERSION} ]]; then \
        . /tmp/params.txt && \
        eval curl ${PARAM_CURL_OPTS} \
            ${POSTGRESQL_RPM_URL}/postgresql${POSTGRESQL_BASE_VERSION}-libs-${POSTGRESQL_VERSION}PGDG.rhel8.x86_64.rpm \
            -o /root/postgresql${POSTGRESQL_BASE_VERSION}-libs-${POSTGRESQL_VERSION}PGDG.rhel8.x86_64.rpm; \
    else \
        . /tmp/params.txt && \
        eval curl ${PARAM_CURL_OPTS} \
            ${PGSPIDER_RPM_URL}/pgspider${PGSPIDER_BASE_POSTGRESQL_VERSION}-libs-${PGSPIDER_RELEASE_VERSION}.rhel8.x86_64${PGSPIDER_RPM_ID}.rpm \
            -o /root/pgspider${PGSPIDER_BASE_POSTGRESQL_VERSION}-libs-${PGSPIDER_RELEASE_VERSION}.rhel8.x86_64.rpm; \
    fi

# Download PostgreSQL/PGSpider core
RUN if [[ -n ${POSTGRESQL_BASE_VERSION} && -n ${POSTGRESQL_VERSION} ]]; then \
        . /tmp/params.txt && \
        eval curl ${PARAM_CURL_OPTS} \
            ${POSTGRESQL_RPM_URL}/postgresql${POSTGRESQL_BASE_VERSION}-${POSTGRESQL_VERSION}PGDG.rhel8.x86_64.rpm \
            -o /root/postgresql${POSTGRESQL_BASE_VERSION}-${POSTGRESQL_VERSION}PGDG.rhel8.x86_64.rpm; \
    else \
        . /tmp/params.txt && \
        eval curl ${PARAM_CURL_OPTS} \
            ${PGSPIDER_RPM_URL}/pgspider${PGSPIDER_BASE_POSTGRESQL_VERSION}-${PGSPIDER_RELEASE_VERSION}.rhel8.x86_64${PGSPIDER_RPM_ID}.rpm \
            -o /root/pgspider${PGSPIDER_BASE_POSTGRESQL_VERSION}-${PGSPIDER_RELEASE_VERSION}.rhel8.x86_64.rpm; \
    fi

# Download PostgreSQL/PGSpider server
RUN if [[ -n ${POSTGRESQL_BASE_VERSION} && -n ${POSTGRESQL_VERSION} ]]; then \
        . /tmp/params.txt && \
        eval curl ${PARAM_CURL_OPTS} \
            ${POSTGRESQL_RPM_URL}/postgresql${POSTGRESQL_BASE_VERSION}-server-${POSTGRESQL_VERSION}PGDG.rhel8.x86_64.rpm \
            -o /root/postgresql${POSTGRESQL_BASE_VERSION}-server-${POSTGRESQL_VERSION}PGDG.rhel8.x86_64.rpm; \
    else \
        . /tmp/params.txt && \
        eval curl ${PARAM_CURL_OPTS} \
            ${PGSPIDER_RPM_URL}/pgspider${PGSPIDER_BASE_POSTGRESQL_VERSION}-server-${PGSPIDER_RELEASE_VERSION}.rhel8.x86_64${PGSPIDER_RPM_ID}.rpm \
            -o /root/pgspider${PGSPIDER_BASE_POSTGRESQL_VERSION}-server-${PGSPIDER_RELEASE_VERSION}.rhel8.x86_64.rpm; \
    fi

# Download PostgreSQL/PGSpider devel
RUN if [[ -n ${POSTGRESQL_BASE_VERSION} && -n ${POSTGRESQL_VERSION} ]]; then \
        . /tmp/params.txt && \
        eval curl ${PARAM_CURL_OPTS} \
            ${POSTGRESQL_RPM_URL}/postgresql${POSTGRESQL_BASE_VERSION}-devel-${POSTGRESQL_VERSION}PGDG.rhel8.x86_64.rpm \
            -o /root/postgresql${POSTGRESQL_BASE_VERSION}-devel-${POSTGRESQL_VERSION}PGDG.rhel8.x86_64.rpm; \
    else \
        . /tmp/params.txt && \
        eval curl ${PARAM_CURL_OPTS} \
            ${PGSPIDER_RPM_URL}/pgspider${PGSPIDER_BASE_POSTGRESQL_VERSION}-devel-${PGSPIDER_RELEASE_VERSION}.rhel8.x86_64${PGSPIDER_RPM_ID}.rpm \
            -o /root/pgspider${PGSPIDER_BASE_POSTGRESQL_VERSION}-devel-${PGSPIDER_RELEASE_VERSION}.rhel8.x86_64.rpm; \
    fi

# Install PostgreSQL/PGSpider
RUN if [[ -n ${POSTGRESQL_BASE_VERSION} && -n ${POSTGRESQL_VERSION} ]]; then \
        dnf -y localinstall \
            --setopt=skip_missing_names_on_install=False \
            /root/postgresql${POSTGRESQL_BASE_VERSION}-libs-${POSTGRESQL_VERSION}PGDG.rhel8.x86_64.rpm \
            /root/postgresql${POSTGRESQL_BASE_VERSION}-${POSTGRESQL_VERSION}PGDG.rhel8.x86_64.rpm \
            /root/postgresql${POSTGRESQL_BASE_VERSION}-devel-${POSTGRESQL_VERSION}PGDG.rhel8.x86_64.rpm \
            /root/postgresql${POSTGRESQL_BASE_VERSION}-server-${POSTGRESQL_VERSION}PGDG.rhel8.x86_64.rpm ; \
    else \
        dnf -y localinstall \
            --setopt=skip_missing_names_on_install=False \
            /root/pgspider${PGSPIDER_BASE_POSTGRESQL_VERSION}-libs-${PGSPIDER_RELEASE_VERSION}.rhel8.x86_64.rpm \
            /root/pgspider${PGSPIDER_BASE_POSTGRESQL_VERSION}-${PGSPIDER_RELEASE_VERSION}.rhel8.x86_64.rpm \
            /root/pgspider${PGSPIDER_BASE_POSTGRESQL_VERSION}-devel-${PGSPIDER_RELEASE_VERSION}.rhel8.x86_64.rpm \
            /root/pgspider${PGSPIDER_BASE_POSTGRESQL_VERSION}-server-${PGSPIDER_RELEASE_VERSION}.rhel8.x86_64.rpm ; \
    fi


# Create non-super user and put ROM files.
# User on host will mapped to this user.
RUN useradd -m user1
RUN echo "user1:user1" | chpasswd
RUN echo "user1 ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

# Install dependencies
RUN sudo -E dnf --enablerepo=devel install -y libcurl-devel openssl-devel libuuid-devel pulseaudio-libs-devel snappy-devel

# Transfer files
WORKDIR /home/user1
RUN mkdir -p /home/user1/parquet_s3_fdw-${PARQUET_S3_FDW_RELEASE_VERSION}
COPY ./ /home/user1/parquet_s3_fdw-${PARQUET_S3_FDW_RELEASE_VERSION}
RUN cp /home/user1/parquet_s3_fdw-${PARQUET_S3_FDW_RELEASE_VERSION}/rpm/parquet_s3_fdw.spec .
RUN rm -rf /home/user1/parquet_s3_fdw-${PARQUET_S3_FDW_RELEASE_VERSION}/.git \
           /home/user1/parquet_s3_fdw-${PARQUET_S3_FDW_RELEASE_VERSION}/rpm/deps \
           /home/user1/parquet_s3_fdw-${PARQUET_S3_FDW_RELEASE_VERSION}/rpm/create_rpm_binary_with_PGSpider.sh \
           /home/user1/parquet_s3_fdw-${PARQUET_S3_FDW_RELEASE_VERSION}/rpm/create_rpm_binary_with_PostgreSQL.sh

# Change permission
RUN chown user1:user1 -R /home/user1/parquet_s3_fdw-${PARQUET_S3_FDW_RELEASE_VERSION}

USER user1
WORKDIR /home/user1

# Build aws s3
COPY rpm/deps/aws_s3_cpp/aws-sdk-cpp.tar.bz2 .
COPY rpm/deps/aws_s3_cpp/aws_s3.spec .
RUN rpmbuild -ba -D "_sourcedir $(pwd)" -D "dist rhel8" -D "aws_release_version ${AWS_S3_CPP_VERSION}" -D 'debug_package %{nil}' -D "package_release_version ${PACKAGE_RELEASE_VERSION}" aws_s3.spec
RUN sudo -E dnf localinstall -y ~/rpmbuild/RPMS/x86_64/aws_s3_cpp*.rpm

# Build arrow
COPY rpm/deps/arrow/apache-arrow-${ARROW_VERSION}.tar.gz .
COPY rpm/deps/arrow/arrow.spec .
RUN rpmbuild -ba -D "_sourcedir $(pwd)" -D "dist rhel8" -D "arrow_release_version ${ARROW_VERSION}" -D 'debug_package %{nil}' -D "package_release_version ${PACKAGE_RELEASE_VERSION}" arrow.spec
RUN sudo -E dnf localinstall -y ~/rpmbuild/RPMS/x86_64/arrow*.rpm

# Build parquet_s3
RUN tar cvjf parquet_s3_fdw.tar.bz2 parquet_s3_fdw-${PARQUET_S3_FDW_RELEASE_VERSION}
RUN if [[ -n ${POSTGRESQL_BASE_VERSION} && -n ${POSTGRESQL_VERSION} ]]; then \
        sed -i "5s/PGSpider/PostgreSQL/g" parquet_s3_fdw.spec ; \
        sed -i "18s/PGSpider/PostgreSQL/g" parquet_s3_fdw.spec ; \
        sed -i "12s/pgspider/postgresql/g" parquet_s3_fdw.spec ; \
        sed -i "15s/pgspider/postgresql/g" parquet_s3_fdw.spec ; \
        rpmbuild -ba -D "_sourcedir $(pwd)" -D "release_version ${PARQUET_S3_FDW_RELEASE_VERSION}" -D "dist rhel8" -D "pgmajorversion ${POSTGRESQL_BASE_VERSION}" -D "pginstdir ${POSTGRESQL_INS}" -D "package_release_version ${PACKAGE_RELEASE_VERSION}" parquet_s3_fdw.spec ; \
    else \
        rpmbuild -ba -D "_sourcedir $(pwd)" -D "release_version ${PARQUET_S3_FDW_RELEASE_VERSION}" -D "dist rhel8" -D "pgmajorversion ${PGSPIDER_BASE_POSTGRESQL_VERSION}" -D "pginstdir ${PGSPIDER_INS}" -D "package_release_version ${PACKAGE_RELEASE_VERSION}" parquet_s3_fdw.spec ; \
    fi

# unset proxy
ENV http_proxy=
ENV https_proxy=
ENV no_proxy=
RUN sudo sed -i "s/.*proxy=.*/proxy=/g" /etc/dnf/dnf.conf
